from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
class MenuEarnCallback(CallbackData, prefix="menu_earn"):
    level: int
    task_type: str | None = None
    task_id: int | None = None
    page: int = 0
    url: str | None = None
    approve: bool = False


# –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å
def get_main_inline_kb(
        *,
        level: int,
        sizes: tuple[int] = (1,),
):
    task_type = {
        "LIKE": "TASK",
        "RECAST": "TASKS",
        "FOLLOW": "TASKS",
    }
    keyboard = InlineKeyboardBuilder()

    for name, data in task_type.items():
        keyboard.add(InlineKeyboardButton(text=name,
                                          callback_data=MenuEarnCallback(level=level + 1, menu_name=data,
                                                                         task_type=name).pack()))

    keyboard.add(InlineKeyboardButton(text="–ö–£–ü–ò–¢–¨ üß≤",
                                      callback_data=MenuEarnCallback(level=7, task_type="BUY_TOKENS").pack()))

    return keyboard.adjust(*sizes).as_markup()


# –º–µ–Ω—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏–π
def complete_task_kb(
        *,
        level: int,
        task_type: str,
        task_id: int,
        page: int,
        url: str,
        sizes: tuple[int] = (1,),
        approve: bool = False,
        is_last_task: bool = False,

):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text="–ü–ï–†–ï–ô–¢–ò –ù–ê CAST",
                                      url=url))
    if not approve:
        keyboard.add(InlineKeyboardButton(text="–í–´–ü–û–õ–ù–ò–õ",
                                          callback_data=MenuEarnCallback(level=level,
                                                                         task_type=task_type,
                                                                         page=page,
                                                                         task_id=task_id,
                                                                         approve=True).pack()))
    if not is_last_task:
        keyboard.add(InlineKeyboardButton(text='–°–õ–ï–î–£–Æ–©–ï–ï –ó–ê–î–ê–ù–ò–ï',
                                          callback_data=MenuEarnCallback(level=1,
                                                                         task_type=task_type,
                                                                         page=page + 1,
                                                                         approve=False,
                                                                         ).pack()))

    keyboard.add(InlineKeyboardButton(text='–ù–ê–ó–ê–î',
                                      callback_data=MenuEarnCallback(level=0,
                                                                     task_type=task_type).pack()))

    return keyboard.adjust(*sizes).as_markup()


def buy_token_kb(
        *,
        level: int,
        task_type: str | None = None
):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–ù–ê–ó–ê–î', callback_data=MenuEarnCallback(level=0,
                                                                                   task_type=task_type).pack()))

    return keyboard.adjust().as_markup()


# —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å callback_data
def create_callback_ikb(
        *,
        btns: dict[str, str],
        sizes: tuple[int] = (1,)
):
    keyboard = InlineKeyboardBuilder()

    for text, data in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))
    return keyboard.adjust(*sizes).as_markup()


# —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å URL –∫–Ω–æ–ø–∫–æ–π
def create_url_ikb(
        *,
        btns: dict[str, str],
        sizes: tuple[int] = (1,)
):
    keyboard = InlineKeyboardBuilder()

    for text, url in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, url=url))
    return keyboard.adjust(*sizes).as_markup()


def create_mix_ikb(
        *,
        btns: dict[str, str],
        sizes: tuple[int] = (1,)
):
    keyboard = InlineKeyboardBuilder()

    for text, value in btns.items():
        if '://' in value:
            keyboard.add(InlineKeyboardButton(text=text, url=value))
        else:
            keyboard.add(InlineKeyboardButton(text=text, callback_data=value))

    return keyboard.adjust(*sizes).as_markup()

