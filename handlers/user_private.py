import os

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from dotenv import load_dotenv, find_dotenv
from sqlalchemy.ext.asyncio import AsyncSession
from colorama import Fore

import keyboard.reply as rkb
import keyboard.inline as ikb
import database.orm_query as q
import logging

from errors.InsufficientFundsException import InsufficientFundsException
from utils.functions import is_hex_string
from assets.FSMClass import AddFid, CreateTask
from handlers.menu_process import get_menu_content
from utils.functions import is_number, get_action_price, get_username_from_url
from warpcast import api



load_dotenv(find_dotenv())
admins = [
    os.getenv('ADMIN_ID1'),
    os.getenv('ADMIN_ID2')
]
user_private_router = Router()


# ############################### USER COMMANDS ################################
@user_private_router.message(CommandStart())
async def start_cmd(msg: Message, session: AsyncSession, state: FSMContext):
    logging.info(f"{msg.from_user.id} - –ó–∞–ø—É—â–µ–Ω –±–æ—Ç –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
    await state.clear()
    print(admins)
    #–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    if msg.from_user.id == 176536188:
       answer = (f"–ß—Ç–æ –Ω–∞–¥–æ —Ö–æ–∑—è–∏–Ω?")
       await msg.answer(text=answer, reply_markup=rkb.create_kb("–ü–æ–ø–æ–ª–Ω–∏—Ç—å USER",
                                                                "–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–∫—Ä—É—Ç–∫—É",
                                                                "–ü–æ—Å—á–∏—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã",
                                                                sizes=(1,1)))
    else:
        answer = (f"–•–∞–ª–æ, {msg.from_user.full_name}.\n\n"
                  "–ü—Ä–æ–∫–∞—á–∞–µ–º —Ç–≤–æ–π WARPCAST ???\n\n"
                  "LFG!!!")
        await msg.delete()
        try:
            user = await q.orm_get_user(session=session, msg=msg)
            logging.info(f"{msg.from_user.id} - –£–∂–µ –∑–∞—Ä–µ–≥–∞–Ω")
            if user is None:
                user = await q.orm_add_user(session=session, msg=msg)
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id}")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –≤ –∑–¥–∞–Ω–∏–∏")
        except:
            logging.warning("–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∏—Ö—É—è")
        await msg.answer(text=answer, reply_markup=rkb.create_kb("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å üß≤",
                                                                 "–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–∫—Ä—É—Ç–∫—É",
                                                                 "–ü—Ä–æ—Ñ–∏–ª—å",
                                                                 "–ú–æ–∏ –∑–∞–∫–∞–∑—ã",
                                                                 placeholder="–ñ–º—è–∫ –∫—Ä—è–∫",
                                                                 sizes=(2, 1, 1)
                                                                 )
                         )


@user_private_router.message(Command("faq"))
async def faq_cmd(msg: Message, state: FSMContext):
    logging.info(f"{msg.from_user.id} - –ß–∏—Ç–∞–µ—Ç FAQ")
    await msg.delete()
    await state.clear()
    answer = (f"F.A.Q.\n\n"
              f"1. –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π üß≤. –ü–æ—Å–ª–µ —á–µ–≥–æ –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
              f"2. –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π:\n"
              f" ________________________________ \n"
              f" | –ó–∞–¥–∞–Ω–∏–µ | –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ | –ó–∞–∫–∞–∑ | \n"
              f" |  Like   |     1      |   2   | \n"
              f" |  Recast |     2      |   4   | \n"
              f" |  Follow |     3      |   6   | \n"
              f" -------------------------------- \n\n"
              f"3. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏ –æ—Ç 5\n\n"
              f"4. –í—Ä–µ–º—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è üß≤ (–º–∏–Ω):\n"
              f" _______________________ \n"
              f" | –ó–∞–¥–∞–Ω–∏–µ |   –í—Ä–µ–º—è   | \n"
              f" |  Like   |    1 min  | \n"
              f" |  Recast |    2 min  | \n"
              f" |  Follow |    3 min  | \n"
              f" ----------------------- \n\n"
              f"5. –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤ –æ—Ç–º–µ–Ω–∏–ª–∏ –µ–≥–æ, –≤–≤–æ–¥–∏—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤.\n\n"
              f"6. –ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–ª–Ω–∏–ª, –Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ, –Ω–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã üß≤, —à—Ç—Ä–∞—Ñ—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã.\n\n"
              f"7. –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ –Ω–∞ –≥–æ—Å —É—Å–ª—É–≥–∏ @username \n\n"
              )
    await msg.answer(text=answer, parse_mode="HTML")


# ################################## PROFILE ###################################
@user_private_router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile_data(msg: Message, session: AsyncSession, state: FSMContext):
    logging.info(f"{msg.from_user.id} - –û—Ç–∫—Ä—ã–ª –ø—Ä–æ—Ñ–∏–ª—å")
    await msg.delete()
    await state.clear()
    user = await q.orm_get_user(session=session, msg=msg)

    answer = (f"Hola {msg.from_user.full_name}\n\n"
              f"FID: {user.fid}\n\n"
              f"–ë–∞–ª–∞–Ω—Å: {user.balance} üß≤")

    if user.fid is None:
        kb = ikb.create_callback_ikb(btns={
            " –î–û–ë–ê–í–ò–¢–¨ FID: ": f'addFID'
        })
    else:
        kb = None
    await msg.answer(text=answer,
                     reply_markup=kb)


@user_private_router.callback_query(F.data == 'addFID')
async def get_fid_data(call: CallbackQuery, state: FSMContext):
    logging.info(f"{call.from_user.id} - –î–æ–±–∞–≤–ª—è–µ—Ç FID")
    await state.set_state(AddFid.FID)
    answer = "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π WARPCAST FID"
    await call.message.edit_text(answer)


@user_private_router.message(AddFid.FID)
async def add_fid_data(msg: Message, session: AsyncSession, state: FSMContext):
    logging.info(f"{msg.from_user.id} - FID –≤–≤–æ–¥")
    fid = msg.text
    if is_number(fid):
        fid = int(fid)
        if await q.orm_get_user(session=session, msg=msg, fid=fid) is not None:
            answer = f"–¢–∞–∫–æ–π FID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ï—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏"
            logging.info(f"{msg.from_user.id} - FID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            await q.orm_update_user_fid(session=session, msg=msg, fid=fid)
            answer = f"FID —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
            logging.info(f"{msg.from_user.id} - FID –î–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    else:
        answer = f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç"

    await msg.answer(
        text=answer,
        reply_markup=rkb.create_kb(
            "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å üß≤",
            "–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–∫—Ä—É—Ç–∫—É",
            "–ü—Ä–æ—Ñ–∏–ª—å",
            "–ú–æ–∏ –∑–∞–∫–∞–∑—ã",
            placeholder="–ñ–º—è–∫ –∫—Ä—è–∫",
            sizes=(2, 1, 1)
        )
    )
    await state.clear()


# ################################## EARN TOKEN ################################
@user_private_router.message(F.text == "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å üß≤")
async def earn_buy_tokens(msg: Message, session: AsyncSession, state: FSMContext):
    logging.info(f"{msg.from_user.id} - –º–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
    await state.clear()
    user = await q.orm_get_user(session=session, msg=msg)
    if user.fid is not None:
        answer, reply_markup = await get_menu_content(session, level=0)
        await msg.answer(text=answer, reply_markup=reply_markup)
        logging.info(f"{msg.from_user.id} - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
    else:
        await msg.answer(text="–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π FID –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª")
        logging.info(f"{msg.from_user.id} - —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç FID")


@user_private_router.callback_query(ikb.MenuEarnCallback.filter())
async def task_complete_page(call: CallbackQuery, callback_data: ikb.MenuEarnCallback, session: AsyncSession):
    logging.info(f"{call.from_user.id} - –ø–∞–≥–∏–Ω–∞—Ü–∏—è")
    user = await q.orm_get_user_by_tg_id(session=session, telegram_id=call.from_user.id)
    tasks = await q.orm_get_tasks(session=session, task_type=callback_data.task_type, user_id=user.id)

    if callback_data.task_type == "BUY_TOKENS":
        logging.info(f"{call.from_user.id} - –∑–∞—Ö–æ—Ç–µ–ª –ø—Ä–∏–∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
        answer, reply_markup = await get_menu_content(
            session,
            level=callback_data.level
        )

        await call.message.edit_text(text=str(answer), reply_markup=reply_markup)
        await call.answer()

    elif callback_data.task_type is not None and tasks:
        for task in tasks:
            print(Fore.WHITE + str(task.id) + ' ' + str(task.price) + ' ' + task.url)

        page = callback_data.page
        if page >= len(tasks):
            task = tasks[0]
            page = 0
        else:
            task = tasks[page]
        answer, reply_markup = await get_menu_content(
            session,
            level=callback_data.level,
            task=task,
            user=user,
            page=page,
            url=f"https://warpcast.com/" + task.url,
            approve=callback_data.approve,
            is_last_task=len(tasks) == 1,
        )

        await call.message.edit_text(text=str(answer), reply_markup=reply_markup)
        await call.answer()
    elif not tasks:
        answer, reply_markup = await get_menu_content(session, level=0)
        answer = f" –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è {callback_data.task_type}. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é."

        await call.message.edit_text(text=answer,
                                     reply_markup=reply_markup)
        await call.answer()
        logging.info(f"{call.from_user.id} - –Ω–µ—Ç –∫–≤–µ—Å—Ç–æ–≤")


# ################################## CREATE TASK ################################
@user_private_router.message(F.text == "–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–∫—Ä—É—Ç–∫—É")
async def create_task(msg: Message, state: FSMContext):
    logging.info(f"{msg.from_user.id} - –º–µ–Ω—é –∑–∞–∫–∞–∑–∞")
    await state.clear()
    await state.set_state(CreateTask.TASK_TYPE)
    answer = f"–í—ã–±–µ—Ä–∏, —á—Ç–æ –±—É–¥–µ–º –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å?"
    await msg.answer(answer,
                     reply_markup=ikb.create_callback_ikb(btns={"LIKE": "LIKE",
                                                                "RECAST": "RECAST",
                                                                "FOLLOW": "FOLLOW",

                                                                }, sizes=(3,)))


@user_private_router.callback_query(CreateTask.TASK_TYPE)
async def get_type_of_task(call: CallbackQuery, state: FSMContext):
    logging.info(f"{call.from_user.id} - –º–µ–Ω—é —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è")
    answer = ''
    action_price = get_action_price(call.data)
    await state.update_data(TASK_PRICE=action_price)
    if call.data == "LIKE":
        answer = (f"–°–∫–æ–ª—å–∫–æ –ª–∞–π–∫–æ–≤ –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?\n\n"
                  f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ª–∞–π–∫–∞ = {action_price} üß≤\n\n"
                  f"<i>*–≤ –±–µ—Ç–∞ —Ç–µ—Å—Ç–µ –Ω–µ–ª—å–∑—è –∑–∞–∫–∞–∑–∞—Ç—å –º–µ–Ω–µ–µ 5 –∏ –±–æ–ª–µ–µ 20 –ª–∞–π–∫–æ–≤ –∑–∞ 1 –∑–∞–∫–∞–∑</i>")
        await state.update_data(TASK_TYPE="LIKE")
    if call.data == "RECAST":
        answer = (f"–°–∫–æ–ª—å–∫–æ —Ä–µ–∫–∞—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?\n\n"
                  f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Ä–µ–∫–∞—Å—Ç–∞ = {action_price} üß≤\n\n"
                  f"<i>*–≤ –±–µ—Ç–∞ —Ç–µ—Å—Ç–µ –Ω–µ–ª—å–∑—è –∑–∞–∫–∞–∑–∞—Ç—å –º–µ–Ω–µ–µ 5 –∏ –±–æ–ª–µ–µ 20 —Ä–µ–∫–∞—Å—Ç–æ–≤ –∑–∞ 1 –∑–∞–∫–∞–∑</i>")
        await state.update_data(TASK_TYPE="RECAST")
    if call.data == "FOLLOW":
        answer = (f"–°–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?\n\n"
                  f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ = {action_price} üß≤\n\n"
                  f"<i>*–≤ –±–µ—Ç–∞ —Ç–µ—Å—Ç–µ –Ω–µ–ª—å–∑—è –∑–∞–∫–∞–∑–∞—Ç—å –º–µ–Ω–µ–µ 5 –∏ –±–æ–ª–µ–µ 20 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ 1 –∑–∞–∫–∞–∑</i>")
        await state.update_data(TASK_TYPE="FOLLOW")

    await state.set_state(CreateTask.TASK_ACTIONS_AMOUNT)
    await call.message.edit_text(text=answer)


@user_private_router.message(CreateTask.TASK_ACTIONS_AMOUNT)
async def get_number_to_task(msg: Message, state: FSMContext, session: AsyncSession):
    logging.info(f"{msg.from_user.id} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞")
    data = await state.get_data()
    user = await q.orm_get_user(session=session, msg=msg)
    task_type = data['TASK_TYPE']
    actions_amount = msg.text
    if is_number(actions_amount):
        actions_amount = int(actions_amount)
        if actions_amount < 5 or actions_amount > 20:
            await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 20")
        elif user.balance >= int(actions_amount) * get_action_price(task_type):
            task_price = actions_amount * data['TASK_PRICE']
            await state.update_data(TASK_PRICE=task_price)
            if task_type == "FOLLOW":
                task_link = "–ø—Ä–æ—Ñ–∏–ª—å"
                answer = (f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ {task_link}\n"
                          f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç {task_price} üß≤\n"
                          f"–ü—Ä–∏–º–µ—Ä:<i> https://warpcast.com/vitalik.eth </i>")
                await state.update_data(ACTIONS_AMOUNT=actions_amount)
                await state.set_state(CreateTask.TASK_URL)
                await msg.answer(text=answer)
            else:
                task_link = "–ø–æ—Å—Ç"
                answer = (f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ {task_link}\n"
                          f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç {task_price} üß≤\n"
                          f"–ü—Ä–∏–º–µ—Ä: <i> https://warpcast.com/vitalik.eth/0xf2fb9ef7 </i>")
                await state.update_data(ACTIONS_AMOUNT=actions_amount)
                await state.set_state(CreateTask.TASK_URL)
                await msg.answer(text=answer)
        else:
            await msg.answer(text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üß≤")
            logging.info(f"{msg.from_user.id} - –Ω–µ—Ç –±–∞–ª–∞–Ω—Å–∞")
    else:
        await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@user_private_router.message(CreateTask.TASK_URL)
async def get_link_to_task(msg: Message, state: FSMContext, session: AsyncSession):
    logging.info(f"{msg.from_user.id} - —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑")
    user = await q.orm_get_user(session=session, msg=msg)
    data = await state.get_data()
    task_type = data['TASK_TYPE']
    actions_amount = data['ACTIONS_AMOUNT']
    task_price = data['TASK_PRICE']
    task_url = msg.text
    if task_url.lower().startswith("https://warpcast.com/"):
        check_link = task_url[len("https://warpcast.com/"):]
        slash_index = check_link.find("/")

        try:
            if slash_index != -1:
                hash_prefix = check_link[slash_index + 1:]
                if len(hash_prefix) == 10 and is_hex_string(hash_prefix) and task_type != "FOLLOW":
                    username = get_username_from_url(check_link)
                    cast_hash = api.get_cast_hash(username, hash_prefix)
                    if cast_hash:

                        await q.orm_write_off_user_balance(session=session, msg=msg, balance_change=task_price)
                        await q.orm_add_task(
                            session=session,
                            user_id=user.id,
                            task_type=task_type,
                            url=task_url.replace("https://warpcast.com/", ""),
                            price=task_price,
                            actions_count=actions_amount,
                            cast_hash=cast_hash,
                        )

                        answer = (f"–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n\n"
                                  f"–ó–∞–∫–∞–∑: {task_type}\n"
                                  f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {actions_amount}\n"
                                  f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {task_price} üß≤\n"
                                  f"–°—Å—ã–ª–∫–∞: {task_url}")
                        await state.clear()
                        await msg.answer(text=answer)
                    else:
                        await msg.answer(text="–ù–µ –Ω–∞—à–µ–ª –ø–æ—Å—Ç")
                        logging.info(f"{msg.from_user.id} - —É–∫–∞–∑–∞–ª –∫—Ä–∏–≤—É—é —Å—Å—ã–ª–∫—É")

                else:
                    await msg.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞")
                    logging.info(f"{msg.from_user.id} - —É–∫–∞–∑–∞–ª –∫—Ä–∏–≤—É—é —Å—Å—ã–ª–∫—É")
            elif len(check_link) != 0:
                if task_type == "FOLLOW":

                    await q.orm_write_off_user_balance(session=session, msg=msg, balance_change=task_price)
                    await q.orm_add_task(
                        session=session,
                        user_id=user.id,
                        task_type=task_type,
                        url=task_url.replace("https://warpcast.com/", ""),
                        price=task_price,
                        actions_count=actions_amount,
                    )

                    answer = (f"–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n\n"
                              f"–ó–∞–∫–∞–∑: {task_type}\n"
                              f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {actions_amount}\n"
                              f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {task_price} üß≤\n"
                              f"–°—Å—ã–ª–∫–∞: {task_url}")
                    await state.clear()
                    await msg.answer(text=answer)
                else:
                    await msg.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞")
                    logging.info(f"{msg.from_user.id} - —É–∫–∞–∑–∞–ª –∫—Ä–∏–≤—É—é —Å—Å—ã–ª–∫—É")
            else:
                await msg.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞")
                logging.info(f"{msg.from_user.id} - —É–∫–∞–∑–∞–ª –∫—Ä–∏–≤—É—é —Å—Å—ã–ª–∫—É")
        except InsufficientFundsException:
            await msg.answer(text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üß≤")
    else:
        await msg.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞")
        logging.info(f"{msg.from_user.id} - —É–∫–∞–∑–∞–ª –∫—Ä–∏–≤—É—é —Å—Å—ã–ª–∫—É")


# ################################## TASK_LIST ###################################
@user_private_router.message(F.text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_orders_task_list(msg: Message, session: AsyncSession, state: FSMContext):
    logging.info(f"{msg.from_user.id} - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã")
    await msg.delete()
    await state.clear()

    user = await q.orm_get_user(session=session, msg=msg)
    tasks = await q.orm_get_tasks_by_user_id(session, user.id)

    answer = f"–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤: \n\n"
    if tasks:
        for task in tasks:
            if task.is_completed:
                ind = "üü¢"
            elif task.actions_completed > 0:
                ind = "üü°"
            else:
                ind = "üî¥"
            answer = answer + f"{ind} {task.type} {task.actions_completed} / {task.actions_count} - <a href = '{task.url}'> —Å—Å—ã–ª–∫–∞ </a>\n"
    else:
        answer = answer + f"–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤"

    await msg.answer(text=answer)
